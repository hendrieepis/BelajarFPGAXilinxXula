-------------------------------------------------------------------------------
-- Title      : <title string>
-- Project    : 
-------------------------------------------------------------------------------
-- File       : keypadcoba.vhd
-- Author     : hendri  <hendri@hendri-Aspire-1810T>
-- Company    : 
-- Created    : 2013-02-01
-- Last update: 2013-02-01
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: <cursor>
-------------------------------------------------------------------------------
-- Copyright (c) 2013 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2013-02-01  1.0      hendri	Created
-------------------------------------------------------------------------------





library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity keypad is
  port(
    reset   : in  std_logic;
    keyIn   : in  std_logic_vector(3 downto 0);
    keyOut  : out std_logic_vector(3 downto 0);
    dataout : out std_logic_vector(7 downto 0);
    clk     : in  std_logic);
end keypad;



architecture Behavioral of keypad is
  signal counter : integer := 0;
begin
  purpose : get keypad data type : sequential inputs : clk, reset outputs : dataout
    process(clk, reset)
    begin  -- process keypad
      if reset = '0' then                 -- asynchronous reset (active low)
        dataout <= "00000000";
      elsif clk'event and clk = '1' then  -- rising clock edge
        counter <= counter + 1;
        case counter is
          when 0 =>
            keyOut <= "0111";
          when 1 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when 2 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when 3 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when 4 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when 5 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when 6 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when 7 =>
            if keyIn = "0111" then
              dataout <= "00000001";
            elsif keyIn = "1011" then
              dataout <= "00000010";
            elsif keyIn = "1101" then
              dataout <= "00000011";
            elsif keyIn = "1110" then
              dataout <= "00000100";
            end if;
          when others => null;
        end case;
      end if;
    end process;

end Behavioral;

process